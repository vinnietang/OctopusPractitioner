name = "Configure SQL Server"
default_guided_failure_mode = "EnvironmentDefault"
description = "This is a regular run I've created trigger for."
multi_tenancy_mode = "TenantedOrUntenanted"

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 100
}

process {
    step "install-sql-server" {
        condition = "Always"
        name = "Install SQL Server"

        action {
            action_type = "Octopus.Script"
            environments = ["staging", "test", "production"]
            properties = {
                Octopus.Action.Script.ScriptBody = <<-EOT
                    Write-Host "Installing SQL Server Localdb"
                    choco install sqllocaldb -y
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
            }
            worker_pool = "hosted-windows"
        }
    }

    step "sql-create-database-if-not-exists" {
        name = "SQL - Create Database If Not Exists"

        action {
            properties = {
                createCommandTimeout = "30"
                createDatabaseName = "#{Project.Database.Name}"
                createSqlDatabaseRetryAttempts = "0"
                createSqlServer = "#{Project.Database.Server.Name}"
                Octopus.Action.Template.Id = "ActionTemplates-43"
                Octopus.Action.Template.Version = "5"
            }
            worker_pool = "hosted-windows"
        }
    }

    step "run-a-script" {
        name = "Run a Script"
        properties = {
            Octopus.Action.TargetRoles = "trident-web"
        }

        action {
            action_type = "Octopus.Script"
            properties = {
                Octopus.Action.RunOnServer = "false"
                Octopus.Action.Script.ScriptBody = "erewerwer"
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
            }
            worker_pool_variable = ""
        }
    }
}